#!/usr/bin/env sh

# Readable password generator.

# Extracts words in order from a selected file and inserts special characters
# at random places to generate a readable password.
# Written based on a Computerphile video:
# How to Choose a Password: https://youtu.be/3NjQ9b3pgIg

# The point of this script is to replace the standard password generation
# that is very hard to input manually with a, still very secure,
# but much easier to write password, for the rare occasion where you have
# to input it manualy, like on a smartphone you're not syncing them to.

# MIT License
#
# Copyright (c) 2020 Alexander Chaplin Braz (http://alexchaplinbraz.com)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Global variables (with sensible defaults):
Replace=
Capitalize=
MaxResets=5
MinPassLen=24
MaxPassLen=30
FixedPassLen=
NumAmount=2
SpeCharsAmount=2
SpeChars="#%!@+-_="
FilePath=""
UseSource=
CopyToClipboard=
Debug=
TransAccents=
UpperAmount=3
LowerAmount=3
ForceUpper=
ForceLower=
UnForceUpper=
UnForceLower=
ResetCounter=0
Version=1.1.1
Password=""
ScriptName="${0##*/}"

suggest_help() {
	printf "Try '%s --help' for more information.\n" "$ScriptName" 1>&2
}

HelpMessage="$ScriptName - Version: $Version
Creator: Alexander Chaplin Braz (http://alexchaplinbraz.com)
License: MIT

Usage:
    $ScriptName [opts] {filepath} [opts]

Examples:
Use the script's own source code, capitalize every word and copy to clipboard:
    $ScriptName -sCc

Use the file \"Journal-2020.md\", translate all accented characters, capitalize
every word and copy to clipboard:
    $ScriptName -tCc \"\$HOME/Documents/Journal-2020.md\"

Use the script's own source code, containing 10 special characters and
with a length between 30 and 40 characters (three versions):
    $ScriptName -s --min-pass-len 30 --max-pass-len 40 --spechars-amount 10
    $ScriptName -s -l 30 -L 40 -P 10
    $ScriptName -sl30L40P10

Options:
    -h | --help                  Display this help message and exit.
    -v | --version               Display version and exit.
    -d | --debug                 Display variable values and output the password
                                 at each step of the process, plus extras.
    -s | --use-source            Use this script's own source code as file.
                                 Provided to easily check how the script works
                                 with the '--debug' option, but shouldn't
                                 really be used for your real passwords.
    -c | --clipboard             Copy the password to clipboard using xclip.
    -C | --capitalize            Capitalize each word, making it easier to read.
    -r | --replace               Instead of inserting special characters and
                                 numbers, replace the password characters.
    -t | --translate-accents     Translate accented characters to their normal
                                 forms, thus keeping them from being parsed out.
                                 Only works for UTF-8 encoded files.
    -R | --max-resets <num>      Maximum amount of resets before the password
                                 is trimmed to the maximum password length.
                                 Default: $MaxResets
    -l | --min-pass-len <num>    Minumum password length.
                                 Default: $MinPassLen
    -L | --max-pass-len <num>    Maximum password length.
                                 Default: $MaxPassLen
    -N | --num-amount <num>      Amount of numbers to insert.
                                 Default: $NumAmount
    -P | --spechars-amount <num> Amount of special characters to insert.
                                 Default: $SpeCharsAmount
    -S | --spechars <chars>      List of special characters to insert.
                                 Avoid using '&' and '$' due to them messing
                                 up the script and $ being interpreted as a
                                 variable in the shell.
                                 Default: $SpeChars
    -A | --upper-amount <num>    Amount of letters to be capitalized.
                                 Default: $UpperAmount
    -a | --lower-amount <num>    Amount of letters to be decapitalized.
                                 Default: $LowerAmount
    -F | --force-upper           Force the password to have a number of
                                 uppercase letters, based on '--upper-amount'.
                                 Gets automatically turned on if there are
                                 no uppercase letters at all.
    -f | --force-lower           Force the password to have a number of
                                 lowercase letters, based on '--lower-amount'.
                                 Gets automatically turned on if there are
                                 no lowercase letters at all.
    -x | --fixed-pass-len <num>  Instead of getting a password with a random
                                 length in a certain range, specify it.
                                 This option overrides '--min-pass-len'
                                 and '--max-pass-len'.
    -U | --unforce-upper         Prevent the automatic capitalization when
                                 there are no uppercase letters.
                                 Gets ignored if '--force-upper' is set.
    -u | --unforce-lower         Prevent the automatic decapitalization when
                                 there are no lowercase letters.
                                 Gets ignored if '--force-lower' is set.
"

# Check argument for type and existence.
# Usage: check_arg "$2" "type1|type2|type3" "$1"
# Where $1 is the option and $2 is the argument.
# Read as: check argument ($2) for these types in option $1.
# Requires shifting afterwards.
check_arg() {
	if printf "%s" "$1" | grep -qE '^\+?[[:digit:]]+$';then
		Type="positive integer"
	elif printf "%s" "$1" | grep -qE '^-[[:digit:]]+$';then
		Type="negative integer"
	elif printf "%s" "$1" | grep -qE '^\+?[[:digit:]]*\.?([[:digit:]]+)$';then
		Type="positive float"
	elif printf "%s" "$1" | grep -qE '^-[[:digit:]]*\.?([[:digit:]]+)$';then
		Type="negative float"
	elif printf "%s" "$1" | grep -qE '^[[:alpha:]]+$';then
		Type="alphabetic"
	elif printf "%s" "$1" | grep -qE '^[[:alnum:]]+$';then
		Type="alphanumeric"
	elif printf "%s" "$1" | grep -qE '^--?[[:alpha:]]+$' || [ -z "$1" ];then
		Missing=true
	else
		Type="UNKNOWN"
	fi

	ExpectedType="$(printf "%s" "$2" | sed 's/|/ or /g')"

	if [ $Missing ]; then
		printf "MISSING ARGUMENT: option '%s' expects %s.\n" \
			"$3" "$ExpectedType" 1>&2
		suggest_help
		exit 1
	elif ! printf "%s" "$Type" | grep -qE "$2"; then
		printf "TYPE ERROR: '%s' expects %s, got %s '%s'.\n" \
			"$3" "$ExpectedType" "$Type" "$1" 1>&2
		suggest_help
		exit 1
	fi
}

# Parse parameters:
while [ "$#" -gt 0 ]; do
	case $1 in
		-[[:alpha:]][[:alpha:]]*|-[[:alpha:]][[:digit:]]*)
			opts=$(printf "%s" "$1" \
				| sed 's/-//;s/[[:alpha:]]/ -&/g;s/-[[:alpha:]]/& /g')
			shift
			set -- $opts "$@"
			continue;;
		-h|--help) printf "%s" "$HelpMessage"; exit 0;;
		-v|--version) printf "%s" "$HelpMessage"; exit 0;;
		-d|--debug) Debug=true;;
		-s|--use-source) UseSource=true;;
		-c|--clipboard) CopyToClipboard=true;;
		-C|--capitalize) Capitalize=true;;
		-r|--replace) Replace=true;;
		-t|--translate-accents) TransAccents=true;;
		-R|--max-resets) check_arg "$2" "positive integer" "$1"
			MaxResets=$2; shift;;
		-l|--min-pass-len) check_arg "$2" "positive integer" "$1"
			MinPassLen=$2; shift;;
		-L|--max-pass-len) check_arg "$2" "positive integer" "$1"
			MaxPassLen=$2; shift;;
		-N|--num-amount) check_arg "$2" "positive integer" "$1"
			NumAmount=$2; shift;;
		-P|--spechars-amount) check_arg "$2" "positive integer" "$1"
			SpeCharsAmount=$2; shift;;
		-S|--spechars) SpeChars=$2; shift;;
		-A|--upper-amount) check_arg "$2" "positive integer" "$1"
			UpperAmount=$2; shift;;
		-a|--lower-amount) check_arg "$2" "positive integer" "$1"
			LowerAmount=$2; shift;;
		-F|--force-upper) ForceUpper=true;;
		-f|--force-lower) ForceLower=true;;
		-x|--fixed-pass-len) check_arg "$2" "positive integer" "$1"
			FixedPassLen=$2; shift;;
		-U|--unforce-upper) UnForceUpper=true;;
		-u|--unforce-lower) UnForceLower=true;;
		-[[:alpha:]]|--[[:alpha:]]*)
			printf "ERROR: unknown option '%s'\n" "$1" 1>&2
			suggest_help
			exit 1;;
		*) 	if [ "$FilePath" ]; then
				printf "ERROR: can't set file twice.\n" 1>&2
				suggest_help
				exit 1
			elif [ ! -f "$1" ]; then
				printf "ERROR: not a file.\n" 1>&2
				suggest_help
				exit 1
			elif [ ! -s "$1" ]; then
				printf "ERROR: file is empty.\n" 1>&2
				suggest_help
				exit 1
			else
				FilePath="$1"
			fi;;
	esac
	shift
done

if [ $Debug ]; then
	printf "Debug Mode\n\n"
	printf "Replace: %s\n" $Replace
	printf "Capitalize: %s\n" $Capitalize
	printf "UseSource: %s\n" $UseSource
	printf "FilePath: %s\n" "$FilePath"
	printf "CopyToClipboard: %s\n" $CopyToClipboard
	printf "MaxResets: %s\n" $MaxResets
	printf "MinPassLen: %s\n" $MinPassLen
	printf "MaxPassLen: %s\n" $MaxPassLen
	printf "FixedPassLen: %s\n" $FixedPassLen
	printf "NumAmount: %s\n" $NumAmount
	printf "SpeCharsAmount: %s\n" $SpeCharsAmount
	printf "SpeChars: %s\n" "$SpeChars"
	printf "Debug: %s\n" $Debug
	printf "TransAccents: %s\n" $TransAccents
	printf "UpperAmount: %s\n" $UpperAmount
	printf "LowerAmount: %s\n" $LowerAmount
	printf "ForceUpper: %s\n" $ForceUpper
	printf "ForceLower: %s\n" $ForceLower
	printf "UnForceUpper: %s\n" $UnForceUpper
	printf "UnForceLower: %s\n" $UnForceLower
fi

# Get the text to use for password generation:
if [ $UseSource ] && [ "$FilePath" ]; then
	printf "ERROR: can't use source and provide a file at the same time.\n" 1>&2
	suggest_help
	exit 1
elif [ $UseSource ]; then
	Text="$(cat "$0")"
elif [ "$FilePath" ]; then
	Text="$(cat "$FilePath")"
else
	printf "ERROR: no file was provided.\n" 1>&2
	suggest_help
	exit 1
fi

# Calculate the correct MaxPassLen if inserting:
[ ! $Replace ] && MaxPassLen=$((MaxPassLen - SpeCharsAmount - NumAmount))
[ $Debug ] && printf "MaxPassLen when Replace is off: %s\n" $MaxPassLen

# Calculate the correct MinPassLen if inserting:
[ ! $Replace ] && MinPassLen=$((MinPassLen - SpeCharsAmount - NumAmount))
[ $Debug ] && printf "MinPassLen when Replace is off: %s\n\n" $MinPassLen

# Check that MaxPassLen isn't lower than MinPassLen:
[ $MaxPassLen -lt $MinPassLen ] && \
	printf "INVALID ARGUMENTS: '%s' can't be lower than '%s'.\n" \
		"--max-pass-len" "--min-pass-len" 1>&2 && \
	exit 1

# Set fixed password length if set:
if [ $FixedPassLen ]; then
	[ ! $Replace ] && MaxPassLen=$((FixedPassLen - SpeCharsAmount - NumAmount))
	[ $Replace ] && MaxPassLen=$FixedPassLen
	[ ! $Replace ] && MinPassLen=$((FixedPassLen - SpeCharsAmount - NumAmount))
	[ $Replace ] && MinPassLen=$FixedPassLen
fi

# Get rid of accents on characters so they aren't lost:
if [ $TransAccents ]; then
	[ "$(uchardet "$FilePath")" = "UTF-8" ] && Text=$(printf "%s" "$Text" \
		| iconv -f UTF-8 -t ASCII//TRANSLIT)
fi

# Separate every word to a new numbered line and only keep [A-Za-z]:
CleanText=$(printf "%s" "$Text" \
	| tr -cd '\12\40\101-\132\141-\172' \
	| tr -s ' ' '\n' \
	| nl -n ln)

# Total amount of words:
TextWC=$(printf "%s" "$CleanText" | wc -l)

# Generate a random starting point:
index=$(shuf -i 1-$TextWC -n1)

# Generate the word-only password:
while true ; do
	if [ $Capitalize ]; then
		Password=$Password$(printf "%s" "$CleanText" \
		| grep -w ^$index \
		| awk '{printf $2}' \
		| sed 's/./\U&/')
		[ $Debug ] && printf "%s\n" "$Password"
	else
		Password=$Password$(printf "%s" "$CleanText" \
		| grep -w ^$index \
		| awk '{printf $2}')
		[ $Debug ] && printf "%s\n" "$Password"
	fi
	[ $ResetCounter -ge $MaxResets ] && \
		Password="$(expr substr "$Password" 1 $MaxPassLen)"
	[ ${#Password} -gt $MaxPassLen ] && Password=""
	[ -z "$Password" ] && ResetCounter=$((ResetCounter + 1))
	[ ${#Password} -ge $MinPassLen ] && break
	index=$((index + 1))
	[ $index -gt $TextWC ] && index=1
done

[ $Debug ] && \
	printf "\n%s <-- Character Count: %s\n" \
	"$Password" ${#Password}

# Generate random, non-repeated positions so that the same characters
# aren't replaced more than once:
if [ $Replace ]; then
	Positions=$(shuf -i \
		1-${#Password} \
		-n$((SpeCharsAmount + NumAmount)) \
		| nl -n ln)
	[ $Debug ] && printf "\n%s\n" "$Positions"
fi

# Function for adding characters:
add_char() {
	if [ "$1" = "special" ]; then
		charAmount=$SpeCharsAmount
		getChar='expr substr "$SpeChars" $(shuf -i 1-${#SpeChars} -n1) 1'
		grepArg='^$((index + 1))'
	elif [ "$1" = "number" ]; then
		charAmount=$NumAmount
		getChar='shuf -i 0-9 -n1'
		grepArg='^$((index + 1 + SpeCharsAmount))'
	fi

	index=0
	while [ $index -lt $charAmount ]; do
		char="$(eval "$getChar")"
		if [ $Replace ]; then
			pos=$(printf "%s" "$Positions" \
				| grep -w $grepArgs \
				| awk '{printf $2}')
			[ $Debug ] && printf "%s at %s  " "$char" $pos
			Password=$(printf "%s" "$Password" \
				| sed s/./"$char"/$pos)
		else
			pos=$(shuf -i 1-${#Password} -n1)
			[ $Debug ] && printf "%s at %s  " "$char" $pos
			Password=$(printf "%s" "$Password" \
				| sed s/./"$char"\&/$pos)
		fi
		index=$((index + 1))
	done
}

# Add special characters to the password:
add_char special

[ $Debug ] && \
	printf "\n%s <-- Character Count: %s\n" \
	"$Password" ${#Password}

# Add numbers to the password:
add_char number

[ $Debug ] && \
	printf "\n%s <-- Character Count: %s\n" \
	"$Password" ${#Password}

# Function for changing capitalization:
change_case_to() {
	if [ "$1" = "upper" ]; then
		forceState=$ForceUpper
		caseAmount=$UpperAmount
		grepClass='[[:lower:]]'
		trString1='[:lower:]'
		trString2='[:upper:]'
		toCase="Upper"
	elif [ "$1" = "lower" ]; then
		forceState=$ForceLower
		caseAmount=$LowerAmount
		grepClass='[[:upper:]]'
		trString1='[:upper:]'
		trString2='[:lower:]'
		toCase="Lower"
	fi

	index=1
	while [ $forceState ] && [ $index -le $caseAmount ]; do
		pos=$(shuf -i 1-${#Password} -n1)
		char="$(expr substr "$Password" $pos 1)"
		[ $Debug ] && printf "\n%s at %s" "$char" $pos
		if printf "%s" "$char" | grep -q "$grepClass"; then
			char="$(printf "%s" "$char" | tr "$trString1" "$trString2")"
			[ $Debug ] && printf "\n%s at %s <-- To %s" "$char" $pos "$toCase"
			Password="$(printf "%s" "$Password" \
				| sed s/./"$char"/$pos)"
			[ $Debug ] && printf "\n%s" "$Password"
			index=$((index + 1))
		elif ! printf "%s" "$Password" | grep -q "$grepClass"; then
			[ $Debug ] && printf "\nAll characters are uppercase\n"
			break
		fi
	done
}

# Calculate the amount of uppercase letters:
UpperCount=$(printf "%s" "$Password" | tr -cd "[:upper:]" | wc -m)
[ $Debug ] && printf "\nUpper Count: %s" $UpperCount

# Force capitalization when there are no uppercase letters:
[ $UpperCount -eq 0 ] && [ ! $UnForceUpper ] && ForceUpper=true
[ $Debug ] && printf "\nForce Upper: %s" $ForceUpper

# Capitalize a number of letters:
change_case_to upper

# Calculate the amount of lowercase letters:
LowerCount=$(printf "%s" "$Password" | tr -cd "[:lower:]" | wc -m)
[ $Debug ] && printf "\nLower Count: %s" $LowerCount

# Force decapitalization when there are no lowercase letters:
[ $LowerCount -eq 0 ] && [ ! $UnForceLower ] && ForceLower=true
[ $Debug ] && printf "\nForce Lower: %s" $ForceLower

# Decapitalize a number of letters:
change_case_to lower

[ $Debug ] && printf "\n\nResulting Password:\n%s\n" "$Password"

# Output resulting password:
if [ $CopyToClipboard ]; then
	printf "%s" "$Password" | xclip -selection clipboard
elif [ ! $Debug ]; then
	printf "%s" "$Password"
fi
